{"version":3,"sources":["components/Header.js","components/WeatherImage.js","containers/Home.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","href","WeatherImage","weatherType","icon","faSun","faCloudRain","faSmog","faCloud","faWind","Home","history","useHistory","useState","weatherData","setWeatherData","city","setCity","useEffect","axios","get","then","response","weather","data","catch","error","console","warn","searchParams","location","search","URLSearchParams","useMemo","cloudiness","currentTemp","highTemp","humidity","lowTemp","windSpeed","clouds","all","Math","round","main","temp","temp_max","temp_min","description","wind","speed","log","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.143d4c47.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <header className=\"Header\">\n      <div>\n        <h1> Matahari's Weather App </h1>\n      </div>\n      <nav>\n        <a href=\"/?city=Jakarta\"> Jakarta </a>\n        <a href=\"/?city=Yokohama\"> Yokohama </a>\n        <a href=\"/?city=Tokyo\"> Tokyo </a>\n        <a href=\"/?city=Holmes Chapel\"> Holmes Chapel </a>\n        <a href=\"/?city=New York\"> New York </a>\n      </nav>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport {\n  faCloud,\n  faCloudRain,\n  faSun,\n  faSmog,\n  faWind,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nfunction WeatherImage({ weatherType }) {\n  switch (weatherType) {\n    case \"clear sky\":\n      return <FontAwesomeIcon icon={faSun} />;\n\n    case \"light rain\":\n      return <FontAwesomeIcon icon={faCloudRain} />;\n\n    case \"overcast clouds\":\n      return <FontAwesomeIcon icon={faSmog} />;\n\n    case \"few clouds\":\n      return <FontAwesomeIcon icon={faCloud} />;\n\n    case \"broken clouds\":\n      return <FontAwesomeIcon icon={faCloud} />;\n\n    case \"moderate rain\":\n      return <FontAwesomeIcon icon={faCloudRain} />;\n\n    default:\n      return <FontAwesomeIcon icon={faWind} />;\n  }\n}\n\nexport default WeatherImage;\n","import React, { useState, useEffect, useMemo } from \"react\";\nimport axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\n\nimport Header from \"../components/Header\";\nimport WeatherImage from \"../components/WeatherImage\";\n\n// Calling env file doesn't work\n// const weatherKey = process.env.OPENWEATHERMAP_KEY;\nconst weatherKey = `7e36d76354fcaf2557bf7ddf78b3d5e6`;\n\nfunction Home() {\n  const history = useHistory();\n\n  const [weatherData, setWeatherData] = useState(null);\n  const [city, setCity] = useState(\"Jakarta\");\n\n  useEffect(() => {\n    axios\n      .get(\n        `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${weatherKey}`\n      )\n      .then(function (response) {\n        // successful request\n        const weather = response.data;\n        setWeatherData(weather);\n      })\n      .catch(function (error) {\n        // best practice: no console logs!!!\n        console.warn(error);\n      });\n  }, [city]);\n\n  useEffect(() => {\n    const searchParams = history.location.search;\n    const urlParams = new URLSearchParams(searchParams);\n    const city = urlParams.get(\"city\");\n    if (city) {\n      setCity(city);\n    }\n  }, [history]);\n\n  const {\n    cloudiness,\n    currentTemp,\n    highTemp,\n    humidity,\n    lowTemp,\n    weatherType,\n    windSpeed,\n  } = useMemo(() => {\n    let cloudiness = \"\";\n    let currentTemp = \"\";\n    let highTemp = \"\";\n    let humidity = \"\";\n    let lowTemp = \"\";\n    let weatherType = \"\";\n    let windSpeed = \"\";\n\n    if (weatherData) {\n      cloudiness = `${weatherData.clouds.all}%`;\n      currentTemp = `${Math.round(weatherData.main.temp)}°C`;\n      highTemp = `${Math.round(weatherData.main.temp_max)}°C`;\n      humidity = `${weatherData.main.humidity}%`;\n      lowTemp = `${Math.round(weatherData.main.temp_min)}°C`;\n      weatherType = `${weatherData.weather[0].description}`;\n      windSpeed = `${weatherData.wind.speed} mph`;\n    }\n\n    return {\n      cloudiness,\n      currentTemp,\n      highTemp,\n      humidity,\n      lowTemp,\n      weatherType,\n      windSpeed,\n    };\n  }, [weatherData]);\n\n  console.log(\"weatherData\", weatherData);\n\n  return (\n    <div className=\"body\">\n      <Header />\n      <main className=\"Home\">\n        <h2>\n          Weather in <span className=\"Highlight\">{city}</span>\n        </h2>\n        <div className=\"WeatherInfo\">\n          <div className=\"WeatherInfo_Basic\">\n            <div className=\"WeatherInfo_Image\">\n              <WeatherImage weatherType={weatherType} />\n            </div>\n            <p className=\"WeatherInfo_Type\">{weatherType}</p>\n            <h3 className=\"Label\">current temperature:</h3>\n            <p className=\"WeatherInfo_Temperature\">{currentTemp}</p>\n          </div>\n\n          <div className=\"WeatherInfo_Extra\">\n            <div className=\"WeatherInfo_Extra_Column\">\n              <h3 className=\"Label\">high temperature:</h3>\n              <p className=\"WeatherInfo_Temperature_Small\">{highTemp}</p>\n              <h3 className=\"Label\">low temperature: </h3>\n              <p className=\"WeatherInfo_Temperature_Small\">{lowTemp}</p>\n              <h3 className=\"Label\">wind speed:</h3>\n              <p className=\"WeatherInfo_Temperature_Small\">{windSpeed}</p>\n            </div>\n            <div className=\"WeatherInfo_Extra_Column\">\n              <h3 className=\"Label\">cloudiness:</h3>\n              <p className=\"WeatherInfo_Temperature_Small\">{cloudiness}</p>\n              <h3 className=\"Label\">humidity:</h3>\n              <p className=\"WeatherInfo_Temperature_Small\">{humidity}</p>\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\n\nimport Home from \"./containers/Home\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}